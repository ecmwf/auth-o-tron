name: Auth-o-tron-CI

on:
  # Run on any push to any branch:
  push: {}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # 1) Check out the repo code
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Install Rust stable (for cargo commands)
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      # 3) Install rustfmt
      - name: Install rustfmt
        run: rustup component add rustfmt

      # 4) Run cargo fmt --check
      - name: Check code formatting
        run: cargo fmt -- --check

      # 5) Run cargo test
      - name: Run tests
        env:
          NO_PROXY: "127.0.0.1,localhost"
        run: |
          unset HTTP_PROXY http_proxy HTTPS_PROXY https_proxy ALL_PROXY all_proxy
          cargo test -- --test-threads=1

      # 6) If not on main, skip release steps
      #    This step creates an output "should_release"
      #    If the branch is main, we set "true", else "false"
      - name: Determine if we are on main
        id: branch_check
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  release:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      # 1) Check out the repository (again)
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Extract the package name and version from Cargo.toml
      - name: Extract package version and name
        id: get_version
        run: |
          # Extract the first occurrence of "name = ..." and "version = ..." from Cargo.toml
          PACKAGE_NAME=$(grep '^name\s*=' Cargo.toml | head -n 1 | cut -d'"' -f2)
          PACKAGE_VERSION=$(grep '^version\s*=' Cargo.toml | head -n 1 | cut -d'"' -f2)
          echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
          # Also set CARGO_VERSION for subsequent steps (for example, to pass to Skaffold)
          echo "CARGO_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "Extracted package: ${PACKAGE_NAME} v${PACKAGE_VERSION}"

      # 3) Log in to ECMWF Docker registry
      - name: Docker login
        run: |
          echo "${{ secrets.ECMWF_DOCKER_REGISTRY_ACCESS_TOKEN }}" | \
            docker login eccr.ecmwf.int --username ${{ secrets.ECMWF_DOCKER_REGISTRY_USERNAME }} --password-stdin

      # 4) Install Skaffold
      - name: Install Skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
          chmod +x skaffold
          sudo mv skaffold /usr/local/bin/

      # 5) Build and push Docker images using Skaffold
      #    Pass along CARGO_VERSION (extracted from Cargo.toml) in case you wish to use it in your image tag.
      - name: Build and push Docker images with Skaffold
        env:
          SKAFFOLD_DEFAULT_REPO: eccr.ecmwf.int/auth-o-tron
          CARGO_VERSION: ${{ env.CARGO_VERSION }}
        run: skaffold build

      # 6) Create a GitHub Release with autogenerated release notes
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.get_version.outputs.package_version }}"
          name: "${{ steps.get_version.outputs.package_name }} v${{ steps.get_version.outputs.package_version }}"
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}