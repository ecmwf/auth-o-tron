# Use as many worker processes as there are available CPU cores for better performance
worker_processes auto;

events {
    # Maximum number of simultaneous connections per worker
    worker_connections 1024;
}

http {
    # --- Upstream Definitions ---
    # Define backend for authentication service (Auth-O-Tron)
    upstream authotron {
        server auth-o-tron:8080;    # Auth-O-Tron listens on port 8080
    }

    # Backend for the protected API
    upstream api_backend {
        server api:80;              # API service listens on port 80
    }

    server {
        listen 80;
        server_name _;  # Catch-all server block

        # Public endpoint to start authentication
        # Users are redirected here if not authenticated
        location = /authenticate {
            # Proxy request to Auth-O-Tron authentication endpoint
            proxy_pass       http://authotron/authenticate$is_args$args;
            # Forward original host and request details for context
            proxy_set_header Host              $host;
            proxy_set_header X-Original-URI    $request_uri;
            proxy_set_header X-Original-Method $request_method;
        }

        # Protected API endpoints
        location /api/ {
            # Check authentication before proxying (subrequest to /_auth)
            auth_request        /_auth;
            # Capture Authorization header (JWT) from the auth response
            auth_request_set    $auth_jwt $upstream_http_authorization;
            # If not authorized, trigger internal redirect to @trigger_auth
            error_page          401 = @trigger_auth;

            # Forward the JWT to the backend API
            proxy_set_header    Authorization "$auth_jwt";
            # Forward original host header
            proxy_set_header    Host          $host;

            # Remove "/api/" prefix before forwarding to backend
            proxy_pass          http://api_backend/;
        }

        # Internal endpoint for authentication check
        location = /_auth {
            internal;  # Only accessible by NGINX internally
            # Proxy to Auth-O-Tron for validation or issuing JWT
            proxy_pass           http://authotron/authenticate;
            # Forward cookies for session-based authentication
            proxy_set_header     Cookie               $http_cookie;
            # Do not send request body to Auth-O-Tron
            proxy_pass_request_body off;
            proxy_set_header     Content-Length       "";
            # Forward original request details for context
            proxy_set_header     X-Original-URI       $request_uri;
            proxy_set_header     X-Original-Method    $request_method;
            proxy_set_header     X-Original-Host      $host;
            proxy_set_header     X-Original-Remote-Addr $remote_addr;
        }

        # Handle authentication failures (401 Unauthorized)
        # We can return 401 Unauthorized here, but we will redirect for better UX
        location @trigger_auth {
            # Redirect the client to /authenticate, preserving the original destination
            return 302 /authenticate?redirect=$scheme://$host$request_uri;
        }
    }
}
